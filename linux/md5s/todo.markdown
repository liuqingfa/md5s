# 为什么选择 PHP

******

## 斑驳

# PHP 的历史

+ 1995 Lerdorf 的 Personal Home Page
+ 1997 年由 C 重写了 2.0，处理 HTML 表单
+ 1999 年就成为了世界上最流行的脚本语言，PHP3
+ 2000 年由 Zend 公司发布 PHP4，几个月就有 360 万域的使用量
+ PHP5 正式面向对象，07年超过两千万个域的使用量
+ PHP6 支持 Unicode，安全性以及语言新特性提升

# PHP 语言特性

+ 实用性：类似 C、Java 语言，弱类型，垃圾回收
+ 功能：开源库 180 多个，专门处理 Flash、图形、pdf、跨协议通讯
+ 可能性：25种以上数据库接口，可扩展字符串解析
+ 成本：没有商业许可证限制、没有 IDE、平台、解释器限制
+ 配置：就 Web 开发而言，有最完善成型的一站式搭建程序

# Why not PHP

+ 容易读
+ 容易写
+ 实现主义
+ 强大的向后兼容性
+ 并不强迫使用某种特定方法，自由的语言
+ 确实有些奇怪的漏洞，可是哪个语言没有呢？

# 与 ASP.Net 比较

+ 除 C# 之外还可能需学习 aspx、VBScript、JScript(非 JavaScript)
+ 控件的使用除了冗余之外弱化了 Web 开发的 HTML、JavaScript
+ 数据库操作复杂(这是不争的事实，效率也不高)
+ 第三方工具、软件库支持相对较少
+ 搭建步骤繁杂，开发计算机配置相对要求较高

# 我的观点

+ 学习时间本来就不多，ASP.Net 要学的东西比 php 多，msdn 真心不好用
+ 开发角度，没有什么比开源项目可以让程序员进步更快的了，
开源的东西我们每天都在用，足够多的眼睛可以让问题浮现；
维护性上，代码量少就是王道，ASP.Net 相对冗余太多了；
“大公司“的 IIS 崩溃了，谁来承担损失，Windows 本身的安全隐患颇多。
+ ASP.Net 的 Web 应用开发不等同于 Windows Phone 的移动开发  
C# 做 Windows 桌面可能很方便，但现在要做的是 Web 应用。
+ PHP 就是为了 Web 而设计的，没有什么最好的语言，只有更合适做某件事的语言。

# ps: 外界对 ASP.Net 的看法

+ SliverLight 已经不再支持
+ MVC 3/4 比较流行，版本约束比较大
+ 微软想做的事情太多了，一个语言要客户端渲染窗体，又要服务端实现页面
+ 没有必要用 C 写界面，没有必要用 VC 写 web 应用
+ 控件的冗余代码过多，框架的冗余也会降低加载速度  
数据库操作繁琐，简单的东西都弄得很复杂
+ Windows 的服务器性能太低

# ps: 外界对 php 的看法

+ Fast CGI，逻辑的效率有直接的保障
+ 开源软件的社区支持，以及原作者的协助
+ 二次开发选择多、工期短、维护成本低
+ 省钱、好看、可交接性强
+ 大型网站的转型 [csdn RoR](http://bbs.csdn.net/topics/390147491)

# ps: IIS 与 Apache

代码、配置简洁程度，CPU、内存占用量

# ps: 相对发明时间来看

+ Perl 1987 - 1991 4.0 - 1994 5.0 - 2012 5.16
+ Python 1991
+ PHP 1995 - 2000 4.0 - 2004 5.0
+ Ruby 1995 - 2011 1.9.3p0 - 2012 1.9.3-p125
+ ASP 1996 - 1998 2.0 - 2001 3.0 (COM+)

# ASP (Active Server Pages)

JSP 类似的脚本语言，可直接进行 C# 编写，提供控件可视化编程接口。  
但是控件的使用弱化了前端编程，使得程序脱离 Web，更像在做控件的桌面应用。

# ASP.优点

+ 有 VBScript JScript 脚本作为可选项
+ 与 ActiveX 兼容，脚本引擎 COM 对象
+ 可视化编程
+ 控制与视图分离
+ 代码与目标代码分离 (cs dll)
+ 不需要考虑费用 (限国内)

# ASP.缺陷

+ 限制于 IIS
+ 数据库操作复杂 (额外的安装 加载 编码)
+ 数据库压力测试结果最差
+ 稳定性、安全性测试较差
+ 第三方函数支持较少
+ 需额外学习控件属性 (比 HTML 更为复杂)
+ 每个控件的响应需服务端支持 (无法页面静态化)
+ 配置复杂 (.net vs iis)

# JSP

Java 众多平台的一种，工作效能以及安全性都是最优的产品，框架十分强悍。  
但是框架过于庞大、商业，中小型站点使用未必是最优选择。

# JSP.优点

+ 被编译成 Servlet 由 JVM 解释执行，第一次访问时需要编译
+ 处理复杂业务规则具备优势，坚实的 MVC 框架
+ 数据库压力测试明显优势

# JSP.缺陷

+ 国内中小网站应用较少
+ 学习占用时间
+ 配置复杂
+ 支持的 VPS 少，需自行安装维护
+ 与 HTML 混合编程，写和看都会花费时间和精力
+ 只能报告 jsp 和相对应的 Servlet 错误，不易于调试
+ 动态编译浪费内存的同时，将错误和问题隐藏，只有触发某个条件后才会出现问题

# PHP

类似 C 和 Java 的脚本语言，专用于字符串处理的解释器引擎，文档丰富。   
效率不如 J2EE，目录层次需要程序员自行设置，部分特性依赖类 Unix 操作系统支持。

# PHP.优点

+ 语言单一，不需要编译
+ 自由，免费，丰富的库、文档支持
+ 搭建速度快
+ 系统性能要求不高，执行效率比 ASP 好
+ 可调用 COM 对象 (针对 Windows 服务器)

# PHP.缺陷

+ 不适合大型商务站
+ 缺乏多层结构支持，只能用分布计算解决高负荷问题
+ 没有命名空间，需避开重名的情况 (用类可以解决)

